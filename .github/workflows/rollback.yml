name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      target-environment:
        description: 'Target environment to rollback to (blue or green)'
        required: true
        type: choice
        options:
        - blue
        - green
      rollback-reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  ROLLBACK_TIMEOUT: 300  # 5분

jobs:
  # 1. 현재 상태 확인
  check-current-state:
    runs-on: ubuntu-latest
    outputs:
      current-env: ${{ steps.check-env.outputs.current-env }}
      target-env: ${{ steps.check-env.outputs.target-env }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Check current environment
      id: check-env
      run: |
        echo "🔍 현재 환경 상태 확인 중..."
        
        # 현재 환경 확인
        CURRENT_ENV=$(ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} '
          if curl -s http://localhost:8010/health > /dev/null 2>&1; then
            echo "blue"
          elif curl -s http://localhost:8011/health > /dev/null 2>&1; then
            echo "green"
          else
            echo "none"
          fi
        ')
        
        TARGET_ENV="${{ github.event.inputs.target-environment }}"
        
        echo "current-env=$CURRENT_ENV" >> $GITHUB_OUTPUT
        echo "target-env=$TARGET_ENV" >> $GITHUB_OUTPUT
        
        echo "📍 현재 환경: $CURRENT_ENV"
        echo "🎯 롤백 대상: $TARGET_ENV"
        echo "📝 롤백 사유: ${{ github.event.inputs.rollback-reason }}"
        
        # 롤백 가능성 확인
        if [ "$CURRENT_ENV" = "$TARGET_ENV" ]; then
          echo "⚠️ 현재 환경과 롤백 대상이 동일합니다."
          echo "롤백이 필요한지 다시 확인해주세요."
        fi

  # 2. 데이터베이스 백업 (현재 상태)
  backup-current-state:
    runs-on: ubuntu-latest
    needs: check-current-state
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Backup current database state
      run: |
        echo "💾 현재 상태 백업 중..."
        
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} '
          cd /home/ubuntu/showmethestock
          
          # 백업 디렉토리 생성
          mkdir -p /home/ubuntu/backups/rollback
          
          # 롤백 전 백업
          ROLLBACK_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          DB_FILES=("snapshots.db" "portfolio.db" "email_verifications.db" "news_data.db")
          
          for db_file in "${DB_FILES[@]}"; do
            if [ -f "backend/$db_file" ]; then
              cp "backend/$db_file" "/home/ubuntu/backups/rollback/${db_file}.rollback_before.${ROLLBACK_TIMESTAMP}"
              echo "✅ 롤백 전 백업 완료: $db_file"
            fi
          done
          
          echo "🎉 롤백 전 백업 완료"
        '

  # 3. 롤백 실행
  execute-rollback:
    runs-on: ubuntu-latest
    needs: [check-current-state, backup-current-state]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Execute rollback
      run: |
        echo "🔄 롤백 실행 시작..."
        echo "현재 환경: ${{ needs.check-current-state.outputs.current-env }}"
        echo "롤백 대상: ${{ needs.check-current-state.outputs.target-env }}"
        
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} '
          set -e
          
          TARGET_ENV="${{ needs.check-current-state.outputs.target-env }}"
          CURRENT_ENV="${{ needs.check-current-state.outputs.current-env }}"
          
          # 포트 설정
          if [ "$TARGET_ENV" = "blue" ]; then
            BACKEND_PORT=8010
            FRONTEND_PORT=3000
          else
            BACKEND_PORT=8011
            FRONTEND_PORT=3001
          fi
          
          echo "🎯 롤백 포트 설정:"
          echo "  백엔드: $BACKEND_PORT"
          echo "  프론트엔드: $FRONTEND_PORT"
          
          cd /home/ubuntu/showmethestock
          
          # 1. 대상 환경 서비스 시작
          echo "🚀 대상 환경 서비스 시작 중..."
          
          # 백엔드 서비스 시작
          sudo systemctl start stock-finder-backend-$TARGET_ENV || true
          sudo systemctl enable stock-finder-backend-$TARGET_ENV || true
          
          # 프론트엔드 서비스 시작
          sudo systemctl start stock-finder-frontend-$TARGET_ENV || true
          sudo systemctl enable stock-finder-frontend-$TARGET_ENV || true
          
          # 2. 서비스 시작 대기
          echo "⏳ 서비스 시작 대기 중..."
          sleep 10
          
          # 3. 대상 환경 헬스체크
          echo "🏥 대상 환경 헬스체크 중..."
          
          # 백엔드 헬스체크
          for i in {1..30}; do
            if curl -s -f http://localhost:$BACKEND_PORT/health > /dev/null 2>&1; then
              echo "✅ 백엔드 헬스체크 통과"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ 백엔드 헬스체크 실패"
              exit 1
            fi
            sleep 2
          done
          
          # 프론트엔드 헬스체크
          for i in {1..30}; do
            if curl -s -f http://localhost:$FRONTEND_PORT > /dev/null 2>&1; then
              echo "✅ 프론트엔드 헬스체크 통과"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ 프론트엔드 헬스체크 실패"
              exit 1
            fi
            sleep 2
          done
          
          # 4. Nginx 설정 업데이트
          echo "📝 Nginx 설정 업데이트 중..."
          
          # Nginx 설정 백업
          sudo cp /etc/nginx/sites-available/stock-finder /etc/nginx/sites-available/stock-finder.rollback_backup.$(date +%Y%m%d_%H%M%S)
          
          # 롤백 대상 환경으로 Nginx 설정 업데이트
          sudo tee /etc/nginx/sites-available/stock-finder > /dev/null << EOF
        server {
            listen 80;
            server_name sohntech.ai.kr;

            # 프론트엔드 프록시
            location / {
                proxy_pass http://localhost:$FRONTEND_PORT;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
            }

            # 백엔드 API 프록시
            location /api/ {
                proxy_pass http://localhost:$BACKEND_PORT/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
            }

            # 로그 설정
            access_log /var/log/nginx/stock-finder.access.log;
            error_log /var/log/nginx/stock-finder.error.log;
        }
        EOF
          
          # Nginx 설정 검증
          if sudo nginx -t; then
            echo "✅ Nginx 설정 검증 완료"
          else
            echo "❌ Nginx 설정 오류"
            # 백업 복원
            sudo cp /etc/nginx/sites-available/stock-finder.rollback_backup.$(date +%Y%m%d_%H%M%S) /etc/nginx/sites-available/stock-finder
            exit 1
          fi
          
          # Nginx 재시작
          echo "🔄 Nginx 재시작 중..."
          sudo systemctl reload nginx
          
          # 5. 최종 확인
          echo "🏥 최종 확인 중..."
          sleep 5
          
          if curl -s -f http://sohntech.ai.kr > /dev/null 2>&1; then
            echo "✅ 롤백 성공"
          else
            echo "❌ 롤백 실패"
            # 백업 복원
            sudo cp /etc/nginx/sites-available/stock-finder.rollback_backup.$(date +%Y%m%d_%H%M%S) /etc/nginx/sites-available/stock-finder
            sudo systemctl reload nginx
            exit 1
          fi
          
          echo "🎉 롤백 완료!"
        '

  # 4. 이전 환경 정리
  cleanup-previous:
    runs-on: ubuntu-latest
    needs: [check-current-state, execute-rollback]
    if: always() && needs.execute-rollback.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Cleanup previous environment
      run: |
        echo "🧹 이전 환경 정리 시작..."
        
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} '
          CURRENT_ENV="${{ needs.check-current-state.outputs.current-env }}"
          TARGET_ENV="${{ needs.check-current-state.outputs.target-env }}"
          
          if [ "$CURRENT_ENV" != "none" ] && [ "$CURRENT_ENV" != "$TARGET_ENV" ]; then
            echo "🛑 이전 환경 ($CURRENT_ENV) 서비스 중지 중..."
            
            sudo systemctl stop stock-finder-backend-$CURRENT_ENV || true
            sudo systemctl stop stock-finder-frontend-$CURRENT_ENV || true
            sudo systemctl disable stock-finder-backend-$CURRENT_ENV || true
            sudo systemctl disable stock-finder-frontend-$CURRENT_ENV || true
            
            echo "✅ 이전 환경 정리 완료"
          else
            echo "ℹ️ 정리할 이전 환경이 없습니다"
          fi
        '

  # 5. 롤백 후 검증
  verify-rollback:
    runs-on: ubuntu-latest
    needs: [check-current-state, execute-rollback, cleanup-previous]
    if: always() && needs.execute-rollback.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Verify rollback
      run: |
        echo "🔍 롤백 후 검증 시작..."
        
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} '
          TARGET_ENV="${{ needs.check-current-state.outputs.target-env }}"
          
          echo "🎯 현재 운영 환경: $TARGET_ENV"
          
          # 포트 설정
          if [ "$TARGET_ENV" = "blue" ]; then
            BACKEND_PORT=8010
            FRONTEND_PORT=3000
          else
            BACKEND_PORT=8011
            FRONTEND_PORT=3001
          fi
          
          # 서비스 상태 확인
          echo "📊 서비스 상태 확인:"
          sudo systemctl status stock-finder-backend-$TARGET_ENV --no-pager -l | head -3
          sudo systemctl status stock-finder-frontend-$TARGET_ENV --no-pager -l | head -3
          
          # 헬스체크
          echo "🏥 헬스체크 실행:"
          
          # 백엔드 헬스체크
          if curl -s -f http://localhost:$BACKEND_PORT/health > /dev/null 2>&1; then
            echo "✅ 백엔드 헬스체크 통과"
          else
            echo "❌ 백엔드 헬스체크 실패"
            exit 1
          fi
          
          # 프론트엔드 헬스체크
          if curl -s -f http://localhost:$FRONTEND_PORT > /dev/null 2>&1; then
            echo "✅ 프론트엔드 헬스체크 통과"
          else
            echo "❌ 프론트엔드 헬스체크 실패"
            exit 1
          fi
          
          # 외부 접근 확인
          if curl -s -f http://sohntech.ai.kr > /dev/null 2>&1; then
            echo "✅ 외부 접근 확인 통과"
          else
            echo "❌ 외부 접근 확인 실패"
            exit 1
          fi
          
          # 응답 시간 측정
          BACKEND_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:$BACKEND_PORT/health)
          FRONTEND_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:$FRONTEND_PORT)
          EXTERNAL_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://sohntech.ai.kr)
          
          echo "⏱️ 응답 시간:"
          echo "  백엔드: ${BACKEND_TIME}초"
          echo "  프론트엔드: ${FRONTEND_TIME}초"
          echo "  외부 접근: ${EXTERNAL_TIME}초"
          
          echo "🎉 롤백 후 검증 완료!"
        '

  # 6. 롤백 완료 알림
  notify-rollback:
    runs-on: ubuntu-latest
    needs: [check-current-state, verify-rollback]
    if: always()
    
    steps:
    - name: Rollback notification
      run: |
        TARGET_ENV="${{ needs.check-current-state.outputs.target-env }}"
        ROLLBACK_STATUS="${{ needs.verify-rollback.result }}"
        ROLLBACK_REASON="${{ github.event.inputs.rollback-reason }}"
        
        if [ "$ROLLBACK_STATUS" = "success" ]; then
          echo "🎉 롤백 성공!"
          echo "현재 운영 환경: $TARGET_ENV"
          echo "롤백 사유: $ROLLBACK_REASON"
          echo "다운타임: 최소화됨"
        else
          echo "❌ 롤백 실패"
          echo "롤백 상태: $ROLLBACK_STATUS"
          echo "롤백 사유: $ROLLBACK_REASON"
        fi
        
        # 롤백 정보 저장
        echo "{
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"action\": \"rollback\",
          \"target_environment\": \"$TARGET_ENV\",
          \"status\": \"$ROLLBACK_STATUS\",
          \"reason\": \"$ROLLBACK_REASON\",
          \"github_workflow\": \"${{ github.workflow }}\",
          \"github_run_id\": \"${{ github.run_id }}\"
        }" > rollback-summary.json
        
        echo "📄 롤백 요약이 rollback-summary.json에 저장되었습니다."
