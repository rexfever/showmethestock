#!/usr/bin/env python3
"""
ÎÇ†Ïßú ÌòïÏãù ÏùºÍ¥ÄÏÑ± Ï†êÍ≤Ä Ïä§ÌÅ¨Î¶ΩÌä∏
"""
import os
import re
import glob

def check_file_patterns(file_path):
    """ÌååÏùºÏóêÏÑú ÎÇ†Ïßú Ìå®ÌÑ¥ Í≤ÄÏÉâ"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
        
        # Î¨∏Ï†úÍ∞Ä Îê† Ïàò ÏûàÎäî Ìå®ÌÑ¥Îì§
        patterns = [
            (r'strftime\(["\']%Y-%m-%d["\']', 'YYYY-MM-DD ÏÉùÏÑ±'),
            (r'strftime\(["\'][^"\']*-%m-[^"\']*["\']', 'ÌïòÏù¥Ìîà Ìè¨Ìï® ÎÇ†Ïßú'),
            (r'format=["\']%Y-%m-%d["\']', 'pandas YYYY-MM-DD ÌååÏã±'),
            (r'datetime\.strptime\([^,]+,\s*["\']%Y-%m-%d["\']', 'YYYY-MM-DD ÌååÏã±'),
            (r'["\'][0-9]{4}-[0-9]{2}-[0-9]{2}["\']', 'ÌïòÎìúÏΩîÎî©Îêú YYYY-MM-DD'),
            (r'date\.replace\(["\'][-]["\']', 'replace ÌïòÏù¥Ìîà Ï†úÍ±∞'),
        ]
        
        for i, line in enumerate(lines, 1):
            for pattern, desc in patterns:
                if re.search(pattern, line):
                    issues.append({
                        'line': i,
                        'content': line.strip(),
                        'issue': desc,
                        'pattern': pattern
                    })
    
    except Exception as e:
        issues.append({'error': str(e)})
    
    return issues

def check_all_files():
    """Î™®Îì† Python ÌååÏùº Í≤ÄÏÇ¨"""
    files_to_check = [
        'main.py',
        'scan_service_refactored.py',
        'kiwoom_api.py',
        'services/returns_service.py',
        'services/scan_service.py',
        'services/report_generator.py',
        'notification_service.py',
        'daily_update_service.py',
        'auto_trading_service.py',
        'naver_pay_service.py',
        'market_analyzer.py',
        'scanner.py',
        'auth_service.py',
        'portfolio_service.py',
        'admin_service.py'
    ]
    
    print("üîç ÎÇ†Ïßú ÌòïÏãù ÏùºÍ¥ÄÏÑ± Ï†êÍ≤Ä ÏãúÏûë...")
    print("="*60)
    
    total_issues = 0
    files_with_issues = 0
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            continue
            
        issues = check_file_patterns(file_path)
        
        if issues:
            files_with_issues += 1
            total_issues += len(issues)
            print(f"\n‚ùå {file_path} ({len(issues)}Í∞ú Ïù¥Ïäà)")
            
            for issue in issues:
                if 'error' in issue:
                    print(f"   Ïò§Î•ò: {issue['error']}")
                else:
                    print(f"   ÎùºÏù∏ {issue['line']}: {issue['issue']}")
                    print(f"   ÏΩîÎìú: {issue['content']}")
        else:
            print(f"‚úÖ {file_path}")
    
    print("\n" + "="*60)
    print(f"üìä Ï†êÍ≤Ä Í≤∞Í≥º:")
    print(f"   Í≤ÄÏÇ¨Ìïú ÌååÏùº: {len([f for f in files_to_check if os.path.exists(f)])}")
    print(f"   Î¨∏Ï†ú ÌååÏùº: {files_with_issues}")
    print(f"   Ï¥ù Ïù¥Ïäà: {total_issues}")
    
    if total_issues == 0:
        print("üéâ Î™®Îì† ÌååÏùºÏù¥ YYYYMMDD ÌòïÏãùÏúºÎ°ú ÌÜµÏùºÎêòÏóàÏäµÎãàÎã§!")
    else:
        print(f"‚ö†Ô∏è  {total_issues}Í∞ú Ïù¥ÏäàÎ•º ÏàòÏ†ïÌï¥Ïïº Ìï©ÎãàÎã§.")

def check_good_patterns():
    """Ïò¨Î∞îÎ•∏ YYYYMMDD Ìå®ÌÑ¥ ÌôïÏù∏"""
    print("\nüîç YYYYMMDD Ìå®ÌÑ¥ ÏÇ¨Ïö© ÌòÑÌô©:")
    
    good_patterns = [
        r'strftime\(["\']%Y%m%d["\']',
        r'format=["\']%Y%m%d["\']',
    ]
    
    files = glob.glob('*.py') + glob.glob('services/*.py')
    good_count = 0
    
    for file_path in files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            for pattern in good_patterns:
                matches = len(re.findall(pattern, content))
                if matches > 0:
                    good_count += matches
                    print(f"‚úÖ {file_path}: {matches}Í∞ú YYYYMMDD Ìå®ÌÑ¥")
        except:
            continue
    
    print(f"Ï¥ù {good_count}Í∞ú Ïò¨Î∞îÎ•∏ YYYYMMDD Ìå®ÌÑ¥ Î∞úÍ≤¨")

if __name__ == "__main__":
    check_all_files()
    check_good_patterns()